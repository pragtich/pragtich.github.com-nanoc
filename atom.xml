<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://members.home.nl/pragtich/</id>
  <title>Joris Pragt's blog feed</title>
  <updated>2012-07-12T22:00:00Z</updated>
  <link rel="alternate" href="http://members.home.nl/pragtich/"/>
  <link rel="self" href="http://members.home.nl/pragtich/atom.xml"/>
  <author>
    <name>Joris Pragt</name>
    <uri>http://members.home.nl/pragtich</uri>
  </author>
  <entry>
    <id>tag:members.home.nl,2012-07-13:/pragtich/technology/Aquamacs Notes.html</id>
    <title type="html">Some notes on using Aquamacs</title>
    <published>2012-07-12T22:00:00Z</published>
    <updated>2012-07-12T22:00:00Z</updated>
    <link rel="alternate" href="http://members.home.nl/pragtich/technology/Aquamacs Notes.html"/>
    <content type="html">&lt;p&gt;Aquamacs is a great text editor for OS X. It does, however, have its
idiosyncrises. So, here I am keeping notes on what worked for me.&lt;/p&gt;

&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;

&lt;p&gt;First of all, Google is your friend. But there is also some
&lt;a href="http://www.emacswiki.org/emacs/AquamacsFAQ"&gt;good documentation on the EmacsWiki site&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id="configuration-file"&gt;Configuration file&lt;/h1&gt;

&lt;p&gt;The Aquamacs does not use the standard &lt;code&gt;.emacs&lt;/code&gt; locations. Instead,
the stuff is hidden in the library. For details, check
&lt;a href="http://www.emacswiki.org/emacs/AquamacsFAQ"&gt;the Aquamacs FAQ&lt;/a&gt;. I tend to edit the files in
&lt;code&gt;~/Library/Preferences/Aquamacs Emacs/&lt;/code&gt; by hand, especially &lt;code&gt;customizations.el&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, this exasperates me so much, that I have learned to use
the &amp;lsquo;customization&amp;rsquo; tool.&lt;/p&gt;

&lt;h1 id="emacsclient"&gt;Emacsclient&lt;/h1&gt;

&lt;p&gt;In using Aquamacs, I wanted to start using it as the default
editor. Some research was needed.&lt;/p&gt;

&lt;h2 id="setup"&gt;Setup&lt;/h2&gt;

&lt;p&gt;I edited &lt;code&gt;.bash_profile&lt;/code&gt; and added the following`;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# editor setup
export EDITOR='/Applications/Aquamacs.app/Contents/MacOS/bin/emacsclient'
export ALTERNATE_EDITOR=vi
alias e=$EDITOR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probably I should research how to use ALTERNATE_EDITOR to startup
Aquamacs, but I want to be sure that I am actually on a windowing
station to do that &amp;ndash; too lazy at the moment. Maybe later. As it is
now, Aquamacs will be used when it&amp;rsquo;s running (like when I&amp;rsquo;m working on
this website), and vi will be used otherwise. &lt;/p&gt;

&lt;p&gt;It also sets up a shorthand editing alias &lt;code&gt;e&lt;/code&gt; for my convenience.&lt;/p&gt;

&lt;p&gt;To get the server to automatically load, I used the customization
interface (Aquamacs -&amp;gt; Preferences, Interfacing to external
utilities, Server) to enable &amp;lsquo;Server Mode&amp;rsquo;. That way, any time
Aquamacs starts up, it will be listening.&lt;/p&gt;

&lt;h2 id="using"&gt;Using&lt;/h2&gt;

&lt;p&gt;Ending an editing session that was started this way, goes as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C-x #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many people rebind this key to something like &lt;code&gt;C-c c&lt;/code&gt; to better match
other applications like GNUS or VCS. Maybe I will too, some day.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-07-13:/pragtich/kippycam/Openwrt connection checking.html</id>
    <title type="html">Keeping Openwrt online using DHCP</title>
    <published>2012-07-12T22:00:00Z</published>
    <updated>2012-07-12T22:00:00Z</updated>
    <link rel="alternate" href="http://members.home.nl/pragtich/kippycam/Openwrt connection checking.html"/>
    <content type="html">&lt;p&gt;I noticed, when
&lt;a href="network-layout.html"&gt;installing the WiFi network bridge to the garden shed&lt;/a&gt;,
that the DHCP client does not reconnect when the connection has been
lost. It just sits there (don&amp;rsquo;t know when it would reconnect, maybe
when the lease expires?) unconnected. For my purpose, that&amp;rsquo;s not very
satisfying, as I need the connection to be robust. &lt;/p&gt;

&lt;p&gt;Since I had worked with &lt;code&gt;monit&lt;/code&gt; before, I figured this would be a
great way to periodically check the state of the connection and
re-enable it when it has dropped out. At a later date, &lt;code&gt;monit&lt;/code&gt; could
also turn out to be helpful in making sure that all other services on
the router remain healthy. &lt;/p&gt;

&lt;h1 id="installing--configuring"&gt;Installing &amp;amp; configuring&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;opkg update
# I am getting the packages from my local copy of the trunk, just
to have it all be consistent. That probably is only critical for
the kernel modules packages, but let's do it for sake of
simplicity

opkg install monit

vi /etc/monitrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added some sensible settings from the template that is in
&lt;code&gt;/etc/monitrc&lt;/code&gt;, mainly to start as a daemon, put the work files in
&lt;code&gt;/tmp&lt;/code&gt; and set the frequency of the checks. And the check for a
connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;check host kiprouter with address 10.0.0.4                                     
    if failed icmp type echo count 3 with timeout 3 seconds then
	exec "/etc/init.d/network restart"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to enable and start monit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/monit enable
/etc/init.d/monit start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing results later&amp;hellip;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-07-04:/pragtich/technology/Nanoc-Github-Pages.html</id>
    <title type="html">Using Nanoc to fill Github Pages</title>
    <published>2012-07-03T22:00:00Z</published>
    <updated>2012-07-03T22:00:00Z</updated>
    <link rel="alternate" href="http://members.home.nl/pragtich/technology/Nanoc-Github-Pages.html"/>
    <content type="html">&lt;p&gt;Started out with an already-existing nanoc folder.&lt;/p&gt;

&lt;p&gt;I Installed git for mac using the standard installer supplied on
git-scm.com (version 1.7.11.1) and created an account on github.&lt;/p&gt;

&lt;p&gt;Created a repository called &lt;username&gt;.github.com&lt;/username&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://schmurfy.github.com/2011/05/06/create_your_github_user_page_with_nanoc.html"&gt;Followed (approximately) this link&lt;/a&gt;
although I made a few changes.&lt;/p&gt;

&lt;p&gt;First of all, I already had a checkin, so could skip the first code
box. I did rename the &lt;code&gt;master&lt;/code&gt; branch to &lt;code&gt;source&lt;/code&gt; and add a second remote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -m master source
git remote add pages https://github.com/&amp;lt;user&amp;gt;/&amp;lt;user&amp;gt;.github.com.git
git push -u pages source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output sounds promising:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Counting objects: 102, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (95/95), done.
Writing objects: 100% (102/102), 237.00 KiB, done.
Total 102 (delta 19), reused 0 (delta 0)
To https://github.com/pragtich/pragtich.github.com.git
 * [new branch]      source -&amp;gt; source
Branch source set up to track remote branch source from pages.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;source&lt;/code&gt; branch now holds the entire page source (including
any output).&lt;/p&gt;

&lt;p&gt;Now I followed the cloning instructions quite rigidly (because I do
not really understand them yet).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# fetch a working copy of your repository
  $ git clone https://github.com/&amp;lt;user&amp;gt;/&amp;lt;user&amp;gt;.github.com.git output
  $ cd output
# create the isolated branch
  $ git symbolic-ref HEAD refs/heads/master
  $ rm .git/index
  $ git clean -fdx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then recreate the output files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ..
nanoc compile
git commit -a
git push pages
cd output/
git add *
git commit
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;git push origin master&lt;/code&gt; part was tricky to figure out to me. It
pushes the output folder&amp;rsquo;s content to it&amp;rsquo;s set remote origin (which
came from the &lt;code&gt;clone&lt;/code&gt;, I assume. Adding the &lt;code&gt;master&lt;/code&gt; determines that
the files are going into the &lt;code&gt;master&lt;/code&gt; branch (which is the leading
branch for the GitHub Pages).&lt;/p&gt;

&lt;p&gt;Finally, I did:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; touch .nojekyll
 git add .nojekyll
 git commit
 
 vi .gitignore       #add .nojekyll to this file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should put a .nojekyll file into the repository, that will not
get clobbered when I nuke the output/ folder (I hope).&lt;/p&gt;

&lt;p&gt;So now, the workflow is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Update files in the &lt;code&gt;content/&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;Compile and upload to test server (I use a rake file)&lt;/li&gt;
  &lt;li&gt;Verify results&lt;/li&gt;
  &lt;li&gt;In the source folder: &lt;code&gt;git commit -a; git push pages&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the output folder: &lt;code&gt;git commit -a; git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Add a rakefile to auto-push both the source and the output once
I have a satisfactory build.&lt;/p&gt;

&lt;h1 id="pushing-using-nanoc-git"&gt;Pushing using nanoc-git&lt;/h1&gt;

&lt;p&gt;I am playing with nanoc-git. I found it through a Google search. It&amp;rsquo;s
maker claims it to be alpha-level software. Let&amp;rsquo;s see. It lives
&lt;a href="https://github.com/cspicker/nanoc-git"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The script does rebuild the output folder implicitly. So it breaks the
prototyping build thing that I have described above. Maybe I&amp;rsquo;ll try to
rewrite it to allow some kind of prototyping, or maybe I will stick
with the plan before. I will see. Good thing I&amp;rsquo;m keeping this blog,
because I tend to forget each syntax before I get to use it again.&lt;/p&gt;

&lt;p&gt;For sake of documentation, I did the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Updated &lt;code&gt;config.yaml&lt;/code&gt;:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  # Additions for nanoc-git: http://graysky.org/2008/12/git-branch-auto-tracking/
  deploy:
    default:
      dst_remote: pages
      dst_branch: master
      src_branch: source
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Installed nanoc-git:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;   gem install nanoc-git
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Edited &lt;code&gt;Rakefile&lt;/code&gt;&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  require 'nanoc-git/tasks'
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, to execute: `rake deploy:git&amp;rsquo; should &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clean the nanoc site&lt;/li&gt;
  &lt;li&gt;Check out the source (&lt;code&gt;source&lt;/code&gt;) from &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Compile the site using &lt;code&gt;nanoc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check out the destination (&lt;code&gt;master&lt;/code&gt;) from &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy all the files from the &lt;code&gt;output/&lt;/code&gt; folder to the root of
&lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Commit in &lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Push to the remote &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check the source back out&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A possible workflow could be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Edit the file 
git add &amp;lt;file&amp;gt;
git commit 
rake co  #this is my prototyping (sitecopy) rake

# Check: ok?

rake deploy:git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or another option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Edit the file 
rake co  #this is my prototyping (sitecopy) rake

# Check: ok?

git add &amp;lt;file&amp;gt;
git commit 

rake deploy:git
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-06-22:/pragtich/kippycam/network-layout.html</id>
    <title type="html">Getting network access in the garden</title>
    <published>2012-06-21T22:00:00Z</published>
    <updated>2012-06-21T22:00:00Z</updated>
    <link rel="alternate" href="http://members.home.nl/pragtich/kippycam/network-layout.html"/>
    <content type="html">&lt;h1 id="the-problem"&gt;The problem&lt;/h1&gt;

&lt;p&gt;The garden is quite long and goes around a bend. The house has an extension towards the back that blocks most lines of sight between the garden and the main house. Also, the distance from the services entry point and the shed where the chickens live, runs in the tens of meters. Here&amp;rsquo;s an overview of the situation:&lt;/p&gt;

&lt;p&gt;&lt;img src="gardenlayout.jpg" alt="Layout of the garden" /&gt;&lt;/p&gt;

&lt;p&gt;The best way would be to dig a pipe through the garden and wire with ethernet. But this would involve digging up 20 meters of paving, and 20 meters of grass. Although it needs to be done some day (to get water and electricity in the garden, for one thing), now is not the time. So &amp;mdash; wireless is the way to go!&lt;/p&gt;

&lt;h1 id="layout"&gt;Layout&lt;/h1&gt;

&lt;p&gt;To get a wifi signal at the shed, the existing infrastructure in the house is insufficient. It only reaches roughly 10 meters into the garden. Too many walls, too many trees and leaves. &lt;/p&gt;

&lt;p&gt;An extra access  point is needed. In the first place I will create a wireless repeater, because this has worked before. Later, I may relocate the repeater to a place where I can reach it with Ethernet: that would be a more elegant solution in the long run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: Research &lt;a href="http://www.rubyinside.com/ruby-graphviz-data-visualization-1477.html"&gt;Railroad&lt;/a&gt; for creating really nice plots.&lt;/p&gt;

&lt;p&gt;The ouline is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Main Router  ==&amp;gt;	Repeater	==&amp;gt;		Webcam server
Airport		 	TL-WR703N			TL-WR703N
DHCP server		relay wlan-wlan			relay wlan-lan
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="openwrt-configuration"&gt;OpenWRT configuration&lt;/h1&gt;

&lt;h2 id="repeater"&gt;Repeater&lt;/h2&gt;

&lt;p&gt;I used the &lt;code&gt;luci&lt;/code&gt; webinterface to configure relaying. Setting this up goes something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opkg update
opkg install luci luci-proto-relay
  	# this auto-installs many dependencies, including relayd and uhttpd
  	/etc/init.d/uhttpd enable
  	/etc/init.d/uhttpd start
  	/etc/init.d/relayd enable		# This is required in trunk versions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, &lt;code&gt;luci&lt;/code&gt; should be up and running by sending the browser to the router&amp;rsquo;s IP address (most likely &lt;code&gt;192.168.1.1&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;A reasonably clear guide to configuring relaying through &lt;code&gt;luci&lt;/code&gt; is given on &lt;a href="http://trac.gateworks.com/wiki/relayd"&gt;this page at gateworks.com&lt;/a&gt;. Only trouble is, that this example is for relaying between &lt;code&gt;lan&lt;/code&gt; and &lt;code&gt;wwan&lt;/code&gt;. I started ambitiously, trying to relay to both &lt;code&gt;lan&lt;/code&gt; and a new &lt;code&gt;wifi AP&lt;/code&gt;, but this stranded in the complications of it. Start easy.
Also disable security first. This cost me an afternoon, because &lt;code&gt;psk2&lt;/code&gt; and the &lt;code&gt;auto&lt;/code&gt; cypher setting were not playing nicely with OS X.&lt;/p&gt;

&lt;p&gt;TODO: Add my own nice pictures of how wifi relaying works.&lt;/p&gt;

&lt;p&gt;Another place to check for instructions is &lt;a href="https://forum.openwrt.org/viewtopic.php?pid=163262#p163262"&gt;In the forums&lt;/a&gt;, but be careful. For one, the &lt;code&gt;trunk&lt;/code&gt; releases need an additional &lt;code&gt;/etc/init.d/relayd enable&lt;/code&gt;. Also, some of the &lt;code&gt;wireless&lt;/code&gt; settings are outdated. The essence is good.&lt;/p&gt;

&lt;p&gt;Something very confusing is the IP address choice for the interface that is not directly connected to the &amp;lsquo;live&amp;rsquo; network. So the &amp;lsquo;access point&amp;rsquo; network in this case. It gets a static address by definition, but this address is largely ignored. Actually, the relayd passes all traffic from the outside network to the internal network. This includes DHCP requests, which also get passed on and get answered by the Main Router. So in fact all clients on both sides of the relay use IP addresses from the Main Router&amp;rsquo;s subnet. Setting the IP address of the &amp;lsquo;inside&amp;rsquo; network to a different subnet helps in case the &amp;lsquo;outside&amp;rsquo; network is unavailable or does not provide DHCP. Then, we need this &amp;lsquo;inside&amp;rsquo; subnet in order to gain access to the router.&lt;/p&gt;

&lt;h2 id="webcam-server"&gt;Webcam server&lt;/h2&gt;

&lt;p&gt;The webcam server follows &lt;a href="http://trac.gateworks.com/wiki/relayd"&gt;the instructions at gateworks.com&lt;/a&gt; mostly literally. I kept the &lt;code&gt;lan&lt;/code&gt; IP at &lt;code&gt;192.168.1.1&lt;/code&gt;, simply because there was no real reason to change it. Relay is overkill here, but I chose it because it allows any potential clients on the &lt;code&gt;LAN&lt;/code&gt; interface (wired clients) to join in the network as if nothing was in between. &lt;/p&gt;

&lt;p&gt;TODO: Add description of mjpg-server in additional page and link here&lt;/p&gt;

&lt;h1 id="physical-network"&gt;Physical network&lt;/h1&gt;

&lt;p&gt;The wireless repeater helps bridging the distance between the house and the shed, but it does rely on &amp;lsquo;line of sight&amp;rsquo;. And even with a clear line of sight (which I do not have, there are tree leaves and a roof partially in the way), the distance is still significant. I took several steps that I intend to document separately:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Convert the TL-WR703N routers to add external antenna connectors.&lt;/li&gt;
  &lt;li&gt;Construct &lt;code&gt;cantennas&lt;/code&gt; to have better gain and a more efficient (narrower) beam.&lt;/li&gt;
  &lt;li&gt;Place the antennas where there is optimal line of sight&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At present, this is enough to cover my needs with limited bandwidth, but acceptable reliability. After researching a bit, cantennas seem to be over-hyped. Maybe I will build yagi or other high gain antennas at a later date. For now, the cans are working.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-06-04:/pragtich/kippycam/Starting project Chicken Webcam.html</id>
    <title type="html">The Kippencam --- starting a new project</title>
    <published>2012-06-03T22:00:00Z</published>
    <updated>2012-06-03T22:00:00Z</updated>
    <link rel="alternate" href="http://members.home.nl/pragtich/kippycam/Starting project Chicken Webcam.html"/>
    <content type="html">&lt;p&gt;I have started a new project: I want to make a webcam in the chicken coop. The poor chickens are out there all day, out of sight of the house. And when we&amp;rsquo;re away, it would be good to be able to check on them now and then, and make sure that they&amp;rsquo;re not getting up to any mischief. Wouldn&amp;rsquo;t it be cool to be able to snap pictures when they&amp;rsquo;re up to no good (like eating that mouse they found, or jumping over the fence, again&amp;hellip;.)? And it would be a great step towards all kinds of cool automation projects, starting with automatic door closing at night.&lt;/p&gt;

&lt;h1 id="requirements"&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;To be self-powered: no running power lines through the garden&lt;/li&gt;
  &lt;li&gt;Wireless connection to the house: no running ethernet cables either&lt;/li&gt;
  &lt;li&gt;At least one webcam, preferably HDTV quality, preferably extension to 3 cameras to be possible in the future&lt;/li&gt;
  &lt;li&gt;Reasonably self-managing and low-maintenance&lt;/li&gt;
  &lt;li&gt;Low cost: we&amp;rsquo;re getting married this year&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id="inspiration"&gt;Inspiration&lt;/h1&gt;

&lt;p&gt;The main idea for this project came from &amp;ldquo;&lt;a href="http://www.instructables.com/id/How-to-set-up-a-solar-powered-webcam-server-using-/"&gt;How to set up a solar powered webcam server using NanosG20 running Debian&lt;/a&gt;&amp;rdquo; by Janisalnis on instructables. &lt;/p&gt;

&lt;p&gt;&lt;img src="janisalnis.jpg" alt="Picture of Janisalnis' setup" title="This is how his project looked when he wrote about it" /&gt;&lt;/p&gt;

&lt;p&gt;Building from this idea, janisalnis already makes the recommendation that modern routers are &lt;a href="http://www.instructables.com/id/How-to-set-up-home-data-server-using-OpenWRT-on-Li/"&gt;a much smarter way to go&lt;/a&gt;. And on &lt;a href="http://barbara320.gotdns.com/"&gt;his homepage&lt;/a&gt; there are many examples of the results of his great projects. There, he links &lt;a href="http://www.slideshare.net/JanisAlnis/home-automation-12979616"&gt;a presentation that really drew my attention&lt;/a&gt;. He is a really creative guy!&lt;/p&gt;

&lt;p&gt;On one slide, he refers to the TP-LINK WR703N, a small router with less than 1W power consumption, yet quite a powerful CPU and USB 2.0! He already refers to a list of possibilities, like HD webcams, USB audio and Arduino linking. Cool stuff! Shockingly enough, these powerful machines sell on ebay for less than EUR20 !!&lt;/p&gt;

&lt;p&gt;And I have played with OpenWRT before, so this is starting to look like a great thing. The first two TL-WR703N&amp;rsquo;s have been ordered, cannot wait for them to get here from Hong Kong!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: I later learned that there is a slightly larger, but largely similar router that can be bought in Europe for a bit more money (but without the long wait): the TL-MR3020. I already had my orders for the smaller one in, but maybe it can be an option for later.&lt;/p&gt;

&lt;h1 id="research"&gt;Research&lt;/h1&gt;

&lt;h2 id="some-reading-on-the-tl-wr703n"&gt;Some reading on the TL-WR703N&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="http://wiki.openwrt.org/toh/tp-link/tl-wr703n"&gt;OpenWRT wiki with all kinds of hardware details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://wiki.openwrt.org/toh/tp-link/tl-mr3020"&gt;Another wiki page with the related and very similar router MR3020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://forum.openwrt.org/viewtopic.php?id=36471"&gt;A forum discussion that shows how to do I2C with the WR703N&lt;/a&gt;. This means that we can control all kinds of hardware without messy Arduino links. I am definitely going to try this.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.instructables.com/member/janisalnis/"&gt;Loads of instructables presentations by janisalnis that include a plethora of step-by-step guides on everything from hardware to software.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://embeddedtimes.blogspot.nl/2011/09/tp-link-tl-wr703n-tiny-linux-capable.html"&gt;A great introduction into the fun of the TL-WR703N by the Embedded Times.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://wiki.openwrt.org/doku.php?id=oldwiki:port.i2c"&gt;A slightly messy piece in the OpenWRT wiki on I2C&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://laakkonen.dy.fi/projektit/tl-wr703n/"&gt;A Finnish site that mentions the external antenna: This is something I will need to do.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://forum.openwrt.org/viewtopic.php?id=34580"&gt;Forum entry that details the external antenna method&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://wiki.villagetelco.org/index.php?title=Building_a_Serial_Port_for_TL-WR703N"&gt;If I manage to screw up the firmware, we may need this to recover (serial port)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;On &lt;a href="http://www.hackup.net"&gt;hackup.net&lt;/a&gt;, there are some nice articles about using OpenWRT for controlling hardware. &lt;a href="http://www.hackup.net/2012/01/openwrt-and-scripting-languages-part-1/#more-358"&gt;This article details one way to use a USB stick for storage, and installing Ruby (without serial support)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://forum.openwrt.org/viewtopic.php?pid=156142"&gt;A great writeup on adding extra internal usb ports&lt;/a&gt;. I will probably just go with an external hub. Why squeeze everything into a small space for this project?&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://wiki.acemonstertoys.org/Tp-link_router"&gt;A detailed list of stuff on hardware control using the WR703N, including Arduino connection and cross-compiling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://forum.openwrt.org/viewtopic.php?pid=125196#p125196"&gt;A writeup of getting usb audio to work (cool)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="wireless-connection"&gt;Wireless connection&lt;/h2&gt;

&lt;p&gt;The chicken coop is located in the garden behind my house. This could be ~50 meters from the current location of the main wireless router. Also, the signal needs to pass through several brick walls. All in all, there is no chance that we will have a connection using any simple method. Indeed, even my MacBook (which has a great antenna) does not get a connection in most of the garden. &lt;/p&gt;

&lt;p&gt;So how to get this to work? I will probably add a cantenna to the WR703 in the garden to get good reception and either move the main wireless router to a better location (the attic?) or set up a repeater somewhere in the house, possibly also with a cantenna. This will take some experimentation.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="solar-powering"&gt;Solar powering&lt;/h2&gt;

&lt;p&gt;For the start of the project, I will go with direct solar powering from the panels. No storage. Once the principle has been proven, I will be charging a battery. I did some research on Open Source solar charge controller projects with the idea of making my own charger. While there are some very nice designs around, I really prefer to go with a proven technology. I want the development of the camera to be the fun part, not the screwing with a battery charger. Ultimate efficiency is also not a parameter for me, so I will probably go with either one of these 2 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Steca SOLSUM 6.6F (&lt;a href="http://www.conrad.nl/ce/nl/product/110678?WT.mc_id=mpfeed&amp;amp;insert=8T"&gt;from Conrad probably&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src="http://steca.de/data/media/26/2628_231x315_SolsumF_72dpi_315px.jpg" alt="SOLSUM" /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MorningStar SHS6 (&lt;a href="http://hobby.marktplaats.nl/elektronica-componenten/544588648-steca-en-morningstar-laadregelaars-accu-zonnepaneel.html?return=eJwljEsKwzAMRO8SSJb%2BNF0UB1PSm5jYxSb%2BiEihpaV3r0JW8540jDPafJNRExp9vZkOg9uWOEUiMFKuDUIVxW0rQXaOUNQsz4qACPd3tnrwaKn149yPD5%2FOzMT5ScCIT48smhGOq2Io%2FJjrXsKWFtb1xYot417YGh4jlwFgt2ogtLqbfn%2FEGzUB&amp;amp;df=1&amp;amp;fta=eNpFkEluwzAMRe%2BihdcaPVDwFXoFg4rsVKgcC6GcCA1y98pG0e4eOP0HInTwIuiB7fc4PTASswSdBFbiKBpPY97A%2BgA2ZvgOydLiCYRNGbhdE9z2db6Hi%2F16Am2R9tVuFEA2Ke0jbzKN4ringSW8zsyGukqggAV%2FBgnRAlPOaY%2B6LxUUN0NXpOi9QrdU6BwXvS6St9pw1deKM4tCc4CuI0MF7YWY64wY3CCxLX8HJfetMgordOai2v%2BIM7x65C2hpynOt2v%2BPPxkbQzAVizToVwt%2FelcP4JPZj9%2B8cEsAofX%2B%2F0DyKNhYA%3D%3D&amp;amp;fta_ind=12&amp;amp;fs=1"&gt;probably from Sunnyside on Marktplaats&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And realistically, at around EUR 20 a piece, there is not a lot to lose.&lt;/p&gt;

&lt;p&gt;Solar panel prices have dropped a lot recently. The cheap made-in-China panels are dropping close to the EUR 1 per Watt-peak mark at the moment. Of course, I have learned from reading, that the cheap suppliers can be quite optimistic regarding their specified Watt-peak values. So in fact the more expensive panels from &amp;lsquo;real&amp;rsquo; manufacturers are supposed to be worth the extra cash. For me, a factor was the availability of reasonably priced small panels on the &lt;a href="http://www.ebay.de"&gt;Ebay&lt;/a&gt; was good. I purchased 2x 30W panels from &lt;a href="http://myworld.ebay.de/enjoysolarshop/"&gt;Enjoy Solar in Bremen&lt;/a&gt;, and will see how they perform. &lt;strong&gt;NOTE:&lt;/strong&gt; There seem to be many sellers on ebay that do get very good reviews, but also rack up significant negative comments. Be sure to check the negative comments for a seller before you buy. I nearly fell for a promising-looking seller, which clearly does not take after-sales care as seriously as any (German!) seller should&amp;hellip;&lt;/p&gt;

&lt;h2 id="openwrt"&gt;OpenWRT&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;[How to use an external USB stick as root filesystem][openwrt-eftroot]. I&amp;rsquo;m not sure how this could affect flash wear: at the moment I will use a cheap memory stick and just see what happens.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://wiki.openwrt.org/doc/howto/usb.storage"&gt;How to enable USB storage, including how to format the partitions for efficiency.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.minipwner.com/index.php/minipwner-build"&gt;A very concise list of instructions to get a WR703N up and going&lt;/a&gt;. Probably not going to use, because it avoids USB stick usage, and why would I?&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.instructables.com/files/orig/F0M/V4MW/H2MYLKL9/F0MV4MWH2MYLKL9.txt"&gt;Janisalnis&amp;rsquo; short description of installing OpenWRT onto a USB stick: a useful start.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
</feed>
