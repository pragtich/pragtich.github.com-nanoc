<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://members.home.nl/pragtich/</id>
  <title>Joris Pragt's blog feed</title>
  <updated>2012-09-21T22:00:00Z</updated>
  <link href="http://members.home.nl/pragtich/" rel="alternate"/>
  <link href="http://members.home.nl/pragtich/atom.xml" rel="self"/>
  <author>
    <name>Joris Pragt</name>
    <uri>http://members.home.nl/pragtich</uri>
  </author>
  <entry>
    <id>tag:members.home.nl,2012-09-22:/pragtich/blog/kippycam/OpenWRT on the TL-WR703N.html</id>
    <title type="html">Installing OpenWRT on a TL-WR703N router using a USB stick as storage</title>
    <published>2012-09-21T22:00:00Z</published>
    <updated>2012-09-21T22:00:00Z</updated>
    <link href="http://members.home.nl/pragtich/blog/kippycam/OpenWRT on the TL-WR703N.html" rel="alternate"/>
    <content type="html">&lt;h1 id="the-situation"&gt;The situation&lt;/h1&gt;

&lt;p&gt;I have actually been working with the TL-WR703N for a while. I got I2C
hardware control to work, and it has been serving mjpeg-streamer
images from a webcam happily for a while. There has been some
crashing, however, and when I got a better webcam (Logitech C920) as a
gift, the crashing is now 100% once the camera is put to work. So,
let&amp;rsquo;s try an upgrade to the latest release of openwrt, and take the
chance to document the steps along the way. &lt;/p&gt;

&lt;p&gt;YMMV, of course. This &lt;em&gt;is&lt;/em&gt; Linux, after all.&lt;/p&gt;

&lt;p&gt;Note that I am installing from an existing install. So, some settings
are taken from the older install. I am trying to document settings
where possible, but it could be that I am missing something. The
router specific pages of the OpenWRT wiki clearly document how to
install the first time, and how to make a USB filesystem.&lt;/p&gt;

&lt;h1 id="mirroring-the-openwrt-folders"&gt;Mirroring the openwrt folders&lt;/h1&gt;

&lt;p&gt;Although not strictly required, I like to mirror the openwrt downloads
folder. This keeps all files compatible, as the trunk files get
changed nearly every day and I do not have 100% faith in my ability to
manage all the possible version conflicts (did I ever say I hate Linux
for all the version conflicts?). This is not very polite, so don&amp;rsquo;t do
it often.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; wget -mk -w 20 http://downloads.openwrt.org/snapshots/trunk/ar71xx/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am on OS X, and perform above &lt;code&gt;wget&lt;/code&gt; in the
/Library/WebServer/Documents folder. This allows the OS X web server
(enable it first) to serve the files, so that I can &lt;code&gt;opkg update&lt;/code&gt; and
&lt;code&gt;opkg install&lt;/code&gt; locally: &lt;strong&gt;nice to have&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id="flashing-the-new-version"&gt;Flashing the new version&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I did end up running into issues on this install. You may
  want to scroll down to &amp;lsquo;fixing space issues&amp;rsquo; to get my updates from
  there first.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/ md5sums
wget http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin
md5sum -c md5sums
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should report that (n-1) out of n files failed (so 1 passed) :-)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysupgrade -v
/tmp/openwrt-ar71xx-generic-tl-wr703n-v1-squashfs-sysupgrade.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hold your breath&amp;hellip;&lt;/p&gt;

&lt;p&gt;According to
&lt;a href="http://wiki.openwrt.org/doc/howto/generic.sysupgrade"&gt;the wiki&lt;/a&gt;, the
files in the libraries folder will still be loaded. Scary&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:/tmp# ls /lib/modules/3.3.8/
aes_generic.ko          iptable_nat.ko          ppp_generic.ko
arc4.ko                 iptable_raw.ko          pppoe.ko
ath.ko                  jbd2.ko                 pppox.ko
ath79_wdt.ko            leds-gpio.ko            scsi_mod.ko
ath9k.ko                ledtrig-default-on.ko   sd_mod.ko
ath9k_common.ko         ledtrig-netdev.ko       sg.ko
ath9k_hw.ko             ledtrig-timer.ko        slhc.ko
cfg80211.ko             ledtrig-usbdev.ko       usb-common.ko
compat.ko               mac80211.ko             usb-storage.ko
crc-ccitt.ko            mbcache.ko              usbcore.ko
crc16.ko                nf_conntrack.ko         x_tables.ko
crypto_algapi.ko        nf_conntrack_ftp.ko     xt_CT.ko
ehci-hcd.ko             nf_conntrack_ipv4.ko    xt_NOTRACK.ko
ext4.ko                 nf_conntrack_irc.ko     xt_TCPMSS.ko
gpio-button-hotplug.ko  nf_defrag_ipv4.ko       xt_comment.ko
ip_tables.ko            nf_nat.ko               xt_conntrack.ko
ipt_LOG.ko              nf_nat_ftp.ko           xt_limit.ko
ipt_MASQUERADE.ko       nf_nat_irc.ko           xt_mac.ko
ipt_REJECT.ko           nls_base.ko             xt_multiport.ko
iptable_filter.ko       ohci-hcd.ko             xt_state.ko
iptable_mangle.ko       ppp_async.ko            xt_tcpudp.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It did actually auto-reboot and it is the newest kernel. Nice! Now I
need to figure out how to update all the programs and kernel modules.&lt;/p&gt;

&lt;p&gt;It actually seems that my user space packages are gone (for example,
e2fsck). How about kernel modules?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# ls /lib/modules/3.3.8/
aes_generic.ko          iptable_nat.ko          ppp_generic.ko
arc4.ko                 iptable_raw.ko          pppoe.ko
ath.ko                  leds-gpio.ko            pppox.ko
ath79_wdt.ko            ledtrig-default-on.ko   slhc.ko
ath9k.ko                ledtrig-netdev.ko       usb-common.ko
ath9k_common.ko         ledtrig-timer.ko        usbcore.ko
ath9k_hw.ko             ledtrig-usbdev.ko       x_tables.ko
cfg80211.ko             mac80211.ko             xt_CT.ko
compat.ko               nf_conntrack.ko         xt_NOTRACK.ko
crc-ccitt.ko            nf_conntrack_ftp.ko     xt_TCPMSS.ko
crypto_algapi.ko        nf_conntrack_ipv4.ko    xt_comment.ko
ehci-hcd.ko             nf_conntrack_irc.ko     xt_conntrack.ko
gpio-button-hotplug.ko  nf_defrag_ipv4.ko       xt_limit.ko
ip_tables.ko            nf_nat.ko               xt_mac.ko
ipt_LOG.ko              nf_nat_ftp.ko           xt_multiport.ko
ipt_MASQUERADE.ko       nf_nat_irc.ko           xt_state.ko
ipt_REJECT.ko           nls_base.ko             xt_tcpudp.ko
iptable_filter.ko       ohci-hcd.ko
iptable_mangle.ko       ppp_async.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also &lt;code&gt;/usr/lib/&lt;/code&gt; seems to be ok:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# ls /usr/lib/
iptables             libip4tc.so.0.0.0    libnl-tiny.so        libxtables.so.5.0.0
libip4tc.so          libjson.so.0         libxtables.so        opkg
libip4tc.so.0        libjson.so.0.0.1     libxtables.so.5      pppd
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="installing-required-stuff-for-usb--cleaning-up"&gt;Installing required stuff for USB &amp;amp; cleaning up&lt;/h1&gt;

&lt;p&gt;Edit opkg.conf to send it to the mirrored packages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#src/gz kippy http://10.0.0.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages
src/gz kippy http://192.168.1.102/downloads.openwrt.org-r32130/snapshots/trunk/ar71xx/pack
#src/gz attitude_adjustment http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages
dest root /
dest ram /tmp
lists_dir ext /var/opkg-lists
option overlay_root /overlay
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are my settings (note, I have 2 different IP ranges depending on
weither I&amp;rsquo;m hard-wiring the router to my laptop, or going through
WiFi). &lt;strong&gt;Wrong address for the link&lt;/strong&gt;: This should have been without
the revision number. &lt;/p&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opkg update
opkg install kmod-usb-storage block-mount swap-utils kmod-fs-ext4 kmod-scsi-generic

root@OpenWrt:~# opkg install kernel kmod-usb-storage block-mount swap-utils kmod-fs-ext4 k
mod-scsi-generic
Package kernel (3.3.8-1-5566392ba3947228e76b8c9283f833d0) installed in root is up to date.
Installing kmod-usb-storage (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org-r32130/snapshots/trunk/ar71xx/packages/kmod-usb-storage_3.3.8-1_ar71xx.ipk.
Package block-mount (0.2.0-8) installed in root is up to date.
Package swap-utils (2.21.1-1) installed in root is up to date.
Installing kmod-fs-ext4 (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org-r32130/snapshots/trunk/ar71xx/packages/kmod-fs-ext4_3.3.8-1_ar71xx.ipk.
Installing kmod-scsi-generic (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org-r32130/snapshots/trunk/ar71xx/packages/kmod-scsi-generic_3.3.8-1_ar71xx.ipk.
Collected errors:
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-usb-storage:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-usb-storage.
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-fs-ext4:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-fs-ext4.
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-scsi-generic:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-scsi-generic.
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apparently the kernel has updated during my mirroring? Rats&amp;hellip; 
Nope, I had the incorrect folder set in my opkg.conf, so it was
fetching old package data. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# wget http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/pac
kages/kernel_3.3.8-1-5566392ba3947228e76b8c9283f833d0_ar71xx.ipk
Connecting to 192.168.1.102 (192.168.1.102:80)
kernel_3.3.8-1-55663 100% |*****************************************|   714   0:00:00 ETA
root@OpenWrt:~# opkg install ./kernel_3.3.8-1-5566392ba3947228e76b8c9283f833d0_ar71xx.ipk 
Installing kernel (3.3.8-1-5566392ba3947228e76b8c9283f833d0) to root...
Configuring kernel.
root@OpenWrt:~# opkg install ./kmod-scsi-core_3.3.8-1_ar71xx.ipk 
Installing kmod-scsi-core (3.3.8-1) to root...
Configuring kmod-scsi-core.
root@OpenWrt:~# opkg install kmod-scsi-generic
Installing kmod-scsi-generic (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-scsi-generic_3.3.8-1_ar71xx.ipk.
Collected errors:
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-scsi-generic:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-scsi-generic.
root@OpenWrt:~# opkg download kmod-scsi-generic
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-scsi-generic_3.3.8-1_ar71xx.ipk.
Downloaded kmod-scsi-generic as ./kmod-scsi-generic_3.3.8-1_ar71xx.ipk.
root@OpenWrt:~# opkg install ./kmod-scsi-generic_3.3.8-1_ar71xx.ipk 
Installing kmod-scsi-generic (3.3.8-1) to root...
Configuring kmod-scsi-generic.
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What&amp;rsquo;s wrong with opkg? It can download, and it can install. But not
together??&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oot@OpenWrt:~# opkg install kmod-usb-storage block-mount swap-utils kmod-fs-ext4 kmod-scs
i-generic
Installing kmod-usb-storage (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-usb-storage_3.3.8-1_ar71xx.ipk.
Package block-mount (0.2.0-9) installed in root is up to date.
Package swap-utils (2.21.2-1) installed in root is up to date.
Installing kmod-fs-ext4 (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-fs-ext4_3.3.8-1_ar71xx.ipk.
Package kmod-scsi-generic (3.3.8-1) installed in root is up to date.
Collected errors:
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-usb-storage:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-usb-storage.
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-fs-ext4:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-fs-ext4.
root@OpenWrt:~# opkg download kmod-usb-storage
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-usb-storage_3.3.8-1_ar71xx.ipk.
Downloaded kmod-usb-storage as ./kmod-usb-storage_3.3.8-1_ar71xx.ipk.
root@OpenWrt:~# opkg install ./kmod-usb-storage_3.3.8-1_ar71xx.ipk 
Installing kmod-usb-storage (3.3.8-1) to root...
Configuring kmod-usb-storage.
root@OpenWrt:~# opkg install kmod-usb-storage block-mount swap-utils kmod-fs-ext4 kmod-scs
i-generic
Package kmod-usb-storage (3.3.8-1) installed in root is up to date.
Package block-mount (0.2.0-9) installed in root is up to date.
Package swap-utils (2.21.2-1) installed in root is up to date.
Installing kmod-fs-ext4 (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-fs-ext4_3.3.8-1_ar71xx.ipk.
Package kmod-scsi-generic (3.3.8-1) installed in root is up to date.
Collected errors:
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-fs-ext4:
 * 	kernel (= 3.3.8-1-ce90e6b3a0d7ebfa8f36ba3494997207) * 
 * opkg_install_cmd: Cannot install package kmod-fs-ext4.
root@OpenWrt:~# opkg download kmod-fs-ext4
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-fs-ext4_3.3.8-1_ar71xx.ipk.
Downloaded kmod-fs-ext4 as ./kmod-fs-ext4_3.3.8-1_ar71xx.ipk.
root@OpenWrt:~# opkg install ./kmod-fs-ext4_3.3.8-1_ar71xx.ipk 
Installing kmod-fs-ext4 (3.3.8-1) to root...
Installing kmod-lib-crc16 (3.3.8-1) to root...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-lib-crc16_3.3.8-1_ar71xx.ipk.
Configuring kmod-lib-crc16.
Configuring kmod-fs-ext4.
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# opkg list-upgradable
libblkid - 2.21.1-1 - 2.21.2-1
libuuid - 2.21.1-1 - 2.21.2-1
blkid - 2.21.1-1 - 2.21.2-1
root@OpenWrt:~# opkg install libblkid libuuid blkid
Upgrading libblkid on root from 2.21.1-1 to 2.21.2-1...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/libblkid_2.21.2-1_ar71xx.ipk.
Upgrading libuuid on root from 2.21.1-1 to 2.21.2-1...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/libuuid_2.21.2-1_ar71xx.ipk.
Upgrading blkid on root from 2.21.1-1 to 2.21.2-1...
Downloading http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/blkid_2.21.2-1_ar71xx.ipk.
Configuring libuuid.
Configuring libblkid.
Configuring blkid.
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some updates&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plugin flash drive. Is recognized as /dev/sdb1. Will this change?
Reboot again with disk plugged in (but first check fstab and disable
partitions).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# mount
rootfs on / type rootfs (rw)
/dev/root on /rom type squashfs (ro,relatime)
proc on /proc type proc (rw,noatime)
sysfs on /sys type sysfs (rw,noatime)
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime,size=14580k)
tmpfs on /dev type tmpfs (rw,noatime,size=512k,mode=755)
devpts on /dev/pts type devpts (rw,noatime,mode=600)
/dev/mtdblock3 on /overlay type jffs2 (rw,noatime)
overlayfs:/overlay on / type overlayfs (rw,relatime,lowerdir=/,upperdir=/overlay)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
none on /proc/bus/usb type usbfs (rw,relatime)
root@OpenWrt:~# mkdir /mnt/flash
root@OpenWrt:~# mount -t ext4 /dev/sd
sda   sda1  sda2  sdb
root@OpenWrt:~# mount -t ext4 /dev/sda2 /mnt/flash
mount: mounting /dev/sda2 on /mnt/flash failed: Invalid argument
root@OpenWrt:~# mount -t ext4 /dev/sda2 /mnt/flash
mount: mounting /dev/sda2 on /mnt/flash failed: Invalid argument
root@OpenWrt:~# mount /dev/sda2 /mnt/flash
mount: mounting /dev/sda2 on /mnt/flash failed: Invalid argument
root@OpenWrt:~# vi /etc/config/fstab

config global automount
		option from_fstab 1
		option anon_mount 1

config global autoswap
		option from_fstab 1
		option anon_swap 0

config mount
		option target   /overlay
		option device   /dev/sda1
		option fstype   ext4
		option options  rw,sync
		option enabled  0
		option enabled_fsck 0

config swap
		option device   /dev/sda2
		option enabled  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# mount /dev/sda1 /mnt/flash
root@OpenWrt:~# mkdir /mnt/flash

rm -Rf /mnt/flash/*
root@OpenWrt:~# tar -C /overlay -cvf - . | tar -C /mnt/flash -xf -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then edit /etc/config/fstab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config global automount
		option from_fstab 1
		option anon_mount 1

config global autoswap
		option from_fstab 1
		option anon_swap 0

config mount
		option target   /overlay
		option device   /dev/sda1
		option fstype   ext4
		option options  rw,sync
		option enabled  1
		option enabled_fsck 1

config swap
		option device   /dev/sda2
		option enabled  0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;opkg install e2fsprogs&lt;/p&gt;

&lt;p&gt;device full&amp;hellip; Hrmpf again&lt;/p&gt;

&lt;h1 id="fixing-space-issue"&gt;Fixing space issue&lt;/h1&gt;

&lt;p&gt;Any time you play around and overwrite a file in flash, it wastes
memory. This probably caused the out of memory issue here.&lt;/p&gt;

&lt;p&gt;Redid everything, but no futzing, and sysupgrade -n -v instead of only
-v
Because of reset, telnet 192.168.1.1, passwd
^D, ssh root@192.168.1.1
I needed to delete the root@192.168.1.1 entry from ~/.ssh/known_hosts&lt;/p&gt;

&lt;p&gt;/etc/opkg.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#src/gz attitude_adjustment http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages
src/gz kippy http://192.168.1.102/downloads.openwrt.org/snapshots/trunk/ar71xx/packages
dest root /  
dest ram /tmp                
lists_dir ext /var/opkg-lists
option overlay_root /overlay
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;root@OpenWrt:~# free&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;total         used         free       shared      buffers
Mem:         29156        18208        10948            0         1348
-/+ buffers:              16860        12296
Swap:            0            0            0
root@OpenWrt:~# df
Filesystem           1K-blocks      Used Available Use% Mounted on
rootfs                    1344       208      1136  15% /
/dev/root                 1536      1536         0 100% /rom
tmpfs                    14580      1860     12720  13% /tmp
tmpfs                      512         0       512   0% /dev
root                     14576        28     14548   0% /tmp/root
overlayfs:/tmp/root      14576        28     14548   0% /tmp/root
/dev/mtdblock3            1344       208      1136  15% /overlay
overlayfs:/overlay        1344       208      1136  15% /
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;opkg now works properly also and nothing is upgradeable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opkg install e2fsprogs

root@OpenWrt:~# free &amp;amp;&amp;amp; df
			 total         used         free       shared      buffers
Mem:         29156        21740         7416            0         1492
-/+ buffers:              20248         8908
Swap:            0            0            0
Filesystem           1K-blocks      Used Available Use% Mounted on
rootfs                    1344      1132       212  84% /
/dev/root                 1536      1536         0 100% /rom
tmpfs                    14580      1860     12720  13% /tmp
tmpfs                      512         0       512   0% /dev
root                     14576        28     14548   0% /tmp/root
overlayfs:/tmp/root      14576        28     14548   0% /tmp/root
/dev/mtdblock3            1344      1132       212  84% /overlay
overlayfs:/overlay        1344      1132       212  84% /
/dev/sdb1               465960     24496    418072   6% /mnt/sdb1
root@OpenWrt:~# 


root@OpenWrt:~# mount
rootfs on / type rootfs (rw)
/dev/root on /rom type squashfs (ro,relatime)
proc on /proc type proc (rw,noatime)
sysfs on /sys type sysfs (rw,noatime)
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime,size=14580k)
tmpfs on /dev type tmpfs (rw,noatime,size=512k,mode=755)
devpts on /dev/pts type devpts (rw,noatime,mode=600)
root on /tmp/root type tmpfs (rw,noatime,mode=755)
overlayfs:/tmp/root on /tmp/root type overlayfs (ro,noatime,lowerdir=/,upperdir=/tmp/root)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
none on /proc/bus/usb type usbfs (rw,relatime)
/dev/mtdblock3 on /overlay type jffs2 (rw,noatime)
overlayfs:/overlay on / type overlayfs (rw,noatime,lowerdir=/,upperdir=/overlay)
/dev/sdb1 on /mnt/sdb1 type ext4 (rw,relatime,user_xattr,barrier=1,data=ordered)
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the flash drive was automounted on /mnt/sdb1 (will be /sda1 when
plugged in at boot).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# ls /mnt/sdb2/
root@OpenWrt:~# ls /mnt/sdb1/
etc   lib   mnt   root  sbin  usr
root@OpenWrt:~# rm -Rf /mnt/sdb1/*
root@OpenWrt:~# ls /mnt/sdb1/
root@OpenWrt:~# 

tar -C /overlay -cvf - . | tar -C /mnt/sdb1 -xf -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bach to /etc/config/fstab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config global automount
		option from_fstab 1
		option anon_mount 1

config global autoswap
		option from_fstab 1
		option anon_swap 0

config mount
		option target   /overlay                         
		option device   /dev/sda1
		option fstype   ext4   
		option options  rw,sync
		option enabled  1    
		option enabled_fsck 1

config swap                      
		option device   /dev/sda2
		option enabled  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reboot&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# df &amp;amp;&amp;amp; free
Filesystem           1K-blocks      Used Available Use% Mounted on
rootfs                  465960     24944    417624   6% /
/dev/root                 1536      1536         0 100% /rom
tmpfs                    14580        64     14516   0% /tmp
tmpfs                      512         0       512   0% /dev
/dev/sda1               465960     24944    417624   6% /overlay
overlayfs:/overlay      465960     24944    417624   6% /
			 total         used         free       shared      buffers
Mem:         29156        17988        11168            0         1644
-/+ buffers:              16344        12812
Swap:            0            0            0
root@OpenWrt:~# mount
rootfs on / type rootfs (rw)
/dev/root on /rom type squashfs (ro,relatime)
proc on /proc type proc (rw,noatime)
sysfs on /sys type sysfs (rw,noatime)
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime,size=14580k)
tmpfs on /dev type tmpfs (rw,noatime,size=512k,mode=755)
devpts on /dev/pts type devpts (rw,noatime,mode=600)
/dev/sda1 on /overlay type ext4 (rw,sync,relatime,user_xattr,barrier=1,data=ordered)
overlayfs:/overlay on / type overlayfs (rw,relatime,lowerdir=/,upperdir=/overlay)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
none on /proc/bus/usb type usbfs (rw,relatime)
root@OpenWrt:~# 

root@OpenWrt:~# swapon /dev/sda2
root@OpenWrt:~# free
			 total         used         free       shared      buffers
Mem:         29156        18208        10948            0         1664
-/+ buffers:              16544        12612
Swap:        32764            0        32764
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again back to /etc/config/fstab:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config global automount
		option from_fstab 1
		option anon_mount 1

config global autoswap
		option from_fstab 1
		option anon_swap 0

config mount
		option target   /home
		option device   /dev/sda1
		option fstype   ext4
		option options  rw,sync
		option enabled  1
		option enabled_fsck 1

config swap
		option device   /dev/sda2
		option enabled  1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reboot to test&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@OpenWrt:~# mount &amp;amp;&amp;amp; free &amp;amp;&amp;amp; df
rootfs on / type rootfs (rw)
/dev/root on /rom type squashfs (ro,relatime)
proc on /proc type proc (rw,noatime)
sysfs on /sys type sysfs (rw,noatime)
tmpfs on /tmp type tmpfs (rw,nosuid,nodev,noatime,size=14580k)
tmpfs on /dev type tmpfs (rw,noatime,size=512k,mode=755)
devpts on /dev/pts type devpts (rw,noatime,mode=600)
/dev/sda1 on /overlay type ext4 (rw,sync,relatime,user_xattr,barrier=1,data=ordered)
overlayfs:/overlay on / type overlayfs (rw,relatime,lowerdir=/,upperdir=/overlay)
debugfs on /sys/kernel/debug type debugfs (rw,relatime)
none on /proc/bus/usb type usbfs (rw,relatime)
			 total         used         free       shared      buffers
Mem:         29156        17724        11432            0         1968
-/+ buffers:              15756        13400
Swap:        32764            0        32764
Filesystem           1K-blocks      Used Available Use% Mounted on
rootfs                  465960     24944    417624   6% /
/dev/root                 1536      1536         0 100% /rom
tmpfs                    14580        64     14516   0% /tmp
tmpfs                      512         0       512   0% /dev
/dev/sda1               465960     24944    417624   6% /overlay
overlayfs:/overlay      465960     24944    417624   6% /
root@OpenWrt:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now to install &lt;code&gt;luci&lt;/code&gt; and &lt;code&gt;mjpeg-streamer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opkg update
opkg install luci
/etc/init.d/uhttpd enable
/etc/init.d/uhttpd start

opkg install htop bash

opkg install mjpg-streamer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and edit /etc/config/mjpg-streamer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config mjpg-streamer core
		option enabled          "1"
		option device           "/dev/video0"
		option resolution       "640x480"
		option fps              "10"
		option www              "/www/webcam0"
		option port             "8080"
 
root@OpenWrt:~# /etc/init.d/mjpg-streamer start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oops, forgot the kermel modules&amp;hellip; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opkg install kmod-video-uvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s check if it has been recognized:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[  719.130000] usbcore: registered new interface driver uvcvideo
[  719.130000] USB Video Class driver (1.1.1)
[  726.590000] usb 1-1.3: USB disconnect, device number 5
[  729.390000] usb 1-1.3: new high-speed USB device number 6 using ehci-platform
[  729.520000] uvcvideo: Found UVC 1.00 device HD Pro Webcam C920 (046d:082d)
[  729.540000] input: HD Pro Webcam C920 as /devices/platform/ehci-platform/usb1/1-1/1-1.3/1-1.3:1.0/input/input1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="does-it-work"&gt;Does it work?&lt;/h1&gt;

&lt;p&gt;Hotplug already works and automatically starts the mjpeg-streamer
daemon as soon as the webcam is plugged in, and kills it when it&amp;rsquo;s
plugged out. Nice!&lt;/p&gt;

&lt;h2 id="memory-limitations"&gt;Memory limitations&lt;/h2&gt;

&lt;p&gt;When switching to higher resolutions, and/or higher framerates, I
noticed lots of crashes of the router. This is a memory issue, where
mjpg-streamer starts using too much. It needs several buffers of the
size of the video frame to work, which at HDTV resolutions means lots
of megabytes. I will try to upgrade the memory of the router to solve
this, or at least alleviate it. &lt;/p&gt;

&lt;p&gt;This is the memory status after all this (at 640x480):&lt;/p&gt;

&lt;p&gt;&lt;img src="mjpegstreamer-640-480.jpg" alt="The screenshot of htop with the settings from this log" title="The screenshot of htop with the settings from this log" /&gt;&lt;/p&gt;

&lt;h2 id="garbled-images"&gt;Garbled images&lt;/h2&gt;

&lt;p&gt;The C920 camera seems to give garbled images when the frame rate is
too high. This is probably due to some bug in the kernel drivers (or
is it by design?) combined with the limited memory transfer bandwidth
of these Atheros processors. It could be that the client reads from a
buffer while another part of the buffer is still being written. Just
guessing here: I&amp;rsquo;m no kernel expert. &lt;/p&gt;

&lt;p&gt;Anyway, keeping the framerate low enough, everything is ok. I should
not expect the world from a router that uses roughly 0.5W!&lt;/p&gt;

&lt;h2 id="instabilities"&gt;Instabilities&lt;/h2&gt;

&lt;p&gt;It seems that using the USB filesystem does cut down on the stability
of the overall system. I have incorporated a cron job to reboot every
24h, and &lt;code&gt;monit&lt;/code&gt; to check the stability of various processes. That
way, things seem doable. In the future I will try and fit everything
into the flash to eliminate these instabilities. Janis Alnis
&lt;a href="https://www.dropbox.com/sh/ity5ho0jq3vwq4l/bsE-hyPe0-"&gt;keeps a file with his notes online, that describes his experinces of doing this successfully&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="web-skeleton"&gt;Web skeleton&lt;/h2&gt;

&lt;p&gt;The standard mjpeg-streamer package for openwrt has no www files
included, in order to reduce the storage requirements. I do want it
there, because it&amp;rsquo;s a quick way of getting some useful testing
done. So, I downloaded the full mjpeg-streamer distribution from &lt;a href="http://sourceforge.net/projects/mjpg-streamer/"&gt;their
website&lt;/a&gt; and copied the www folder into &lt;code&gt;/www/webcam0/&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-08-22:/pragtich/kippycam/OpenWRT system logs.html</id>
    <title type="html">System logging with OpenWRT</title>
    <published>2012-08-21T22:00:00Z</published>
    <updated>2012-08-21T22:00:00Z</updated>
    <link href="http://members.home.nl/pragtich/kippycam/OpenWRT system logs.html" rel="alternate"/>
    <content type="html">&lt;p&gt;I kept running into issues with the Kippycam server router
crashing. Because the default syslog apparently is kept in memory,
these crashes were hard to debug. So I tried to get better (permanent
logging).&lt;/p&gt;

&lt;p&gt;Since my router has ample storage space (it&amp;rsquo;s an extroot
with a flash drive), let&amp;rsquo;s start with disk storage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; vi /etc/config/system

config system
	option hostname 'Kippycam'
	option zonename 'UTC'
	option timezone 'GMT0'
	option conloglevel '8'
	option cronloglevel '8'
	option log_file '/var/log/messages'
	option log_size '2048'
	option log_type 'file'

config timeserver 'ntp'
	list server '0.openwrt.pool.ntp.org'
	list server '1.openwrt.pool.ntp.org'
	list server '2.openwrt.pool.ntp.org'
	list server '3.openwrt.pool.ntp.org'
	option enable_server '0'

config led
	option default '0'

&amp;gt; /etc/init.d/boot restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. A lot larger log file is being kept on the USB stick.&lt;/p&gt;

&lt;p&gt;Another idea would be to add a network syslog server. Maybe later.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-08-15:/pragtich/blog/kippycam/Adding an I2C interface to the TL-WR703N.html</id>
    <title type="html">Adding an I2C interface to the TL-WR703N</title>
    <published>2012-08-14T22:00:00Z</published>
    <updated>2012-08-14T22:00:00Z</updated>
    <link href="http://members.home.nl/pragtich/blog/kippycam/Adding an I2C interface to the TL-WR703N.html" rel="alternate"/>
    <content type="html">&lt;h1 id="the-goal"&gt;The goal&lt;/h1&gt;

&lt;p&gt;To enable the creative use of the wireless router in the garden to do
all kinds of fun stuff. My first insane ideas are things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Closing the chicken coop door (determined by remote control or
automatically)&lt;/li&gt;
  &lt;li&gt;Making a feed dispenser, so that the chickens may be tempted to be
close to the camera&lt;/li&gt;
  &lt;li&gt;Counting and logging the egg laying productivity (and the chickens&amp;rsquo;
noise?)&lt;/li&gt;
  &lt;li&gt;Monitoring the solar panels and battery charge status.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s just the start&amp;hellip;&lt;/p&gt;

&lt;h1 id="approach"&gt;Approach&lt;/h1&gt;

&lt;p&gt;Because of the &lt;a href="https://forum.openwrt.org/viewtopic.php?id=36471"&gt;promising reports for at least 2 GPIO pins in the
TL-WR703N&lt;/a&gt;, I was looking for an interface that supports powerful
actions, with the minimum of wires. In the end, I chose I2C because a
cursory web search showed all kinds of cool chips that support it, and
because of the low complexity. SPI needs addressing, that I was not
sure I coud deliver, and 1-wire is only suited to a very limited array
of devices. Serial communication could have worked, but this is not
very robust against jitter (and we will be bit-banging) and demands a
lot from each client. So: I2C it is!&lt;/p&gt;

&lt;h1 id="adding-i2c-interface"&gt;Adding I2C interface&lt;/h1&gt;

&lt;p&gt;All the background information that I used came from the kind people
that generated their knowledge
&lt;a href="https://forum.openwrt.org/viewtopic.php?id=36471"&gt;to the Openwrt forums&lt;/a&gt;. I pretty much copied that
what they did before. A few points are critical:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The parts are really really small. Take a lot of care, use a very
sharp soldering iron and use magnification.&lt;/li&gt;
  &lt;li&gt;The traces in the router are easily peeled off. Do not apply
vertical forces and make sure to releive any forces on the wires. I
epoxied all wires to the PCB after soldering to prevent them from
pulling the PCB traces.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These were the steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remove R15 and R17.&lt;/li&gt;
  &lt;li&gt;Solder very thin wires to each pad (the side facing away from the
USB connector)&lt;/li&gt;
  &lt;li&gt;Solder a +3.3V wire to the square field marked &lt;code&gt;LED2 +&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Solder a GND wire to the micro-USB connector (reset button side)&lt;/li&gt;
  &lt;li&gt;Solder a +5V wire to the other side of the micro-USB connector
(Ethernet side)&lt;/li&gt;
  &lt;li&gt;Glue the wires to the PCB using 2-component epoxy adhesive.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&amp;hellip;although the micro usb wires may be the other way around&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src="I2C-soldered.jpg" alt="The finished product" title="After completing the soldering" /&gt;
&lt;img src="I2C-soldered-detail.jpg" alt="The finished product, some more detail" title="Some more detail" /&gt;&lt;/p&gt;

&lt;p&gt;Then I cut a hole into the top of the housing and glued a 2x3 boxed
header onto the lid of the router. I chose the following pin-out in an
attempt to keep the signal wires apart:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;5V&lt;/li&gt;
  &lt;li&gt;NC&lt;/li&gt;
  &lt;li&gt;SCL (GPIO7, 3.3V)&lt;/li&gt;
  &lt;li&gt;GND&lt;/li&gt;
  &lt;li&gt;SDA (GPIO 29, 3.3V)&lt;/li&gt;
  &lt;li&gt;3.3V&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s how it looks:&lt;/p&gt;

&lt;p&gt;&lt;img src="I2C-done.jpg" alt="The finished product, outside" title="The end product, closed and tidy." /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Pull-ups yet, so these need to be put on the client side, or
  built in later.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id="installing-on-openwrt"&gt;Installing on Openwrt&lt;/h1&gt;
&lt;p&gt;The OpenWRT wiki has loads of (some more outdated than other) stuff on
I2C
&lt;a href="http://wiki.openwrt.org/doku.php?id=oldwiki:port.i2c"&gt;at this link&lt;/a&gt;. Let&amp;rsquo;s
start with the basics:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; opkg update
&amp;gt; opkg install i2c-tools
&amp;gt;opkg install kmod-i2c-gpio-custom

Installing kmod-i2c-gpio-custom (3.3.8-2) to root...
Downloading http://192.168.1.100/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-i2c-gpio-custom_3.3.8-2_ar71xx.ipk.
Collected errors:
 * satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-i2c-gpio-custom:
 * 	kmod-i2c-algo-bit * 
 * opkg_install_cmd: Cannot install package kmod-i2c-gpio-custom.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we are missing kmod-i2c-algo-bit. A quick check on the
&lt;a href="http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/"&gt;downloads page for trunk&lt;/a&gt; shows it missing there,
too. But I really need it. &lt;/p&gt;

&lt;p&gt;**So now what? **&lt;/p&gt;

&lt;p&gt;Left over from
&lt;a href="../technology/Compiling gstreamer
for C920 webcam.html"&gt;my experiments with compiling OpenWRT on OS X&lt;/a&gt; was a local compile directory that actually
successfully compiles. So I went in there and did a &lt;code&gt;make
menuconfig&lt;/code&gt;. When I installed all the I2C stuff, it automatically
enables the &lt;code&gt;i2c-gpio-custom&lt;/code&gt; module. And after &lt;code&gt;make&lt;/code&gt;, it also
compiles the matchin object file. But no &lt;code&gt;.ipk&lt;/code&gt; to match. Where did it
go&amp;hellip;?&lt;/p&gt;

&lt;p&gt;After a bit of searching it was
found. &lt;code&gt;trunk/build_dir/linux-ar71xx_generic/linux-3.3.8/modules.builtin&lt;/code&gt;
tells exactly where it went: into the kernel (built-in, not as a
module). Here&amp;rsquo;s a list of all the stuff that was builtin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kernel/fs/jffs2/jffs2.ko
kernel/fs/overlayfs/overlayfs.ko
kernel/fs/squashfs/squashfs.ko
kernel/crypto/crypto.ko
kernel/block/deadline-iosched.ko
kernel/drivers/base/firmware_class.ko
kernel/drivers/gpio/gpio-nxp-74hc153.ko
kernel/drivers/gpio/gpio-pcf857x.ko
kernel/drivers/i2c/i2c-core.ko
kernel/drivers/i2c/algos/i2c-algo-bit.ko
kernel/drivers/i2c/busses/i2c-gpio.ko
kernel/drivers/mtd/mtd.ko
kernel/drivers/mtd/redboot.ko
kernel/drivers/mtd/myloader.ko
kernel/drivers/mtd/tplinkpart.ko
kernel/drivers/mtd/wrt160nl_part.ko
kernel/drivers/mtd/mtdchar.ko
kernel/drivers/mtd/mtd_blkdevs.ko
kernel/drivers/mtd/mtdblock.ko
kernel/drivers/mtd/chips/chipreg.ko
kernel/drivers/mtd/chips/cfi_probe.ko
kernel/drivers/mtd/chips/cfi_util.ko
kernel/drivers/mtd/chips/cfi_cmdset_0002.ko
kernel/drivers/mtd/chips/gen_probe.ko
kernel/drivers/mtd/chips/jedec_probe.ko
kernel/drivers/mtd/devices/m25p80.ko
kernel/drivers/mtd/maps/map_funcs.ko
kernel/drivers/mtd/maps/physmap.ko
kernel/drivers/net/mii.ko
kernel/drivers/net/dsa/mv88e6060.ko
kernel/drivers/net/ethernet/atheros/ag71xx/ag71xx.ko
kernel/drivers/net/phy/libphy.ko
kernel/drivers/net/phy/swconfig.ko
kernel/drivers/net/phy/marvell.ko
kernel/drivers/net/phy/ip17xx.ko
kernel/drivers/net/phy/ar8216.ko
kernel/drivers/net/phy/rtl8306.ko
kernel/drivers/net/phy/rtl8366_smi.ko
kernel/drivers/net/phy/rtl8366s.ko
kernel/drivers/net/phy/rtl8366rb.ko
kernel/drivers/net/phy/rtl8367.ko
kernel/drivers/net/phy/micrel.ko
kernel/drivers/spi/spi-ap83.ko
kernel/drivers/spi/spi-ath79.ko
kernel/drivers/spi/spi-bitbang.ko
kernel/drivers/tty/serial/serial_core.ko
kernel/drivers/tty/serial/8250/8250.ko
kernel/net/802/p8022.ko
kernel/net/802/psnap.ko
kernel/net/802/stp.ko
kernel/net/8021q/vlan_core.ko
kernel/net/8021q/8021q.ko
kernel/net/bridge/bridge.ko
kernel/net/dsa/dsa_core.ko
kernel/net/ipv4/tcp_cubic.ko
kernel/net/llc/llc.ko
kernel/net/packet/af_packet.ko
kernel/net/unix/unix.ko
kernel/lib/bitrev.ko
kernel/lib/crc32.ko
kernel/lib/lzma/lzma_compress.ko
kernel/lib/lzma/lzma_decompress.ko
kernel/lib/xz/xz_dec.ko
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, something is wonky with Openwrt. Either one of the two:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The kernel config automatically configures the module as a builtin
and ignores my wish to have it as a module. &lt;/li&gt;
  &lt;li&gt;The package &lt;code&gt;kmod-i2c-gpio-custom&lt;/code&gt; incorrectly forces the
dependency to &lt;code&gt;kmod-i2c-algo-bit&lt;/code&gt;, while indeed it is builtin by
default.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I do not understand the kernel enough to know who&amp;rsquo;s wrong, but the
solution is clear:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; opkg install --force-depends kmod-i2c-gpio-custom
Installing kmod-i2c-gpio-custom (3.3.8-2) to root...
Downloading http://192.168.1.100/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-i2c-gpio-custom_3.3.8-2_ar71xx.ipk.
Installing kmod-i2c-gpio (3.3.8-1) to root...
Downloading http://192.168.1.100/downloads.openwrt.org/snapshots/trunk/ar71xx/packages/kmod-i2c-gpio_3.3.8-1_ar71xx.ipk.
Configuring kmod-i2c-gpio.
Configuring kmod-i2c-gpio-custom.
Collected errors:
* satisfy_dependencies_for: Cannot satisfy the following dependencies for kmod-i2c-gpio-custom:
* 	kmod-i2c-algo-bit * 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But does it work?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; insmod i2c-gpio-custom bus0=0,29,7
&amp;gt; dmesg |tail

[  711.120000] Custom GPIO-based I2C driver version 0.1.1
[  711.120000] i2c-gpio i2c-gpio.0: using pins 29 (SDA) and 7 (SCL)
[  712.920000] br-lan: port 1(eth0) entered forwarding state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success?&lt;/p&gt;

&lt;h1 id="the-first-io-test"&gt;The first IO test&lt;/h1&gt;

&lt;p&gt;I made a breadboard with the &lt;code&gt;PCF8574&lt;/code&gt; IO expander from Texas
Instruments (also available from NXP, but TI gives free samples). It
takes the 3.3V power from the router, pulls up and has 8 LEDs from
3.3V to the pins of the &lt;code&gt;PCF8574&lt;/code&gt;. Maybe I&amp;rsquo;ll write an update about
the breadboard later, but it&amp;rsquo;s mainly just the datasheet
application. Later I switched to 5V and added level shifting MOSFETs,
again, maybe some day I&amp;rsquo;ll write it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# i2cdetect 0
WARNING! This program can confuse your I2C bus, cause data loss and worse!
I will probe file /dev/i2c-0.
I will probe address range 0x03-0x77.
Continue? [Y/n] 
	  0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: 20 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- -- 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo pcf8574 0x20 &amp;gt; /sys/bus/i2c/devices/i2c-0/new_device
# dmesg | tail
[  153.590000] Custom GPIO-based I2C driver version 0.1.1
[  153.590000] i2c-gpio i2c-gpio.0: using pins 29 (SDA) and 7 (SCL)
[  651.600000] gpiochip_add: registered GPIOs 56 to 63 on device: pcf8574
[  651.600000] pcf857x 0-0020: 
[  651.610000] i2c i2c-0: new_device: Instantiated device pcf8574 at 0x20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sounds good: we have a chip at the correct address, and 8 new GPIOs
were created (numberd 56 through 63). Careful though: the &lt;code&gt;PCF8574&lt;/code&gt;
does not get detected in any way. So only the &lt;code&gt;i2cdetect&lt;/code&gt; output
really confirms that something is there on the bus and responding. So let&amp;rsquo;s test the GPIOs for
confirmation.&lt;/p&gt;

&lt;h1 id="actually-blinking-leds"&gt;Actually blinking LEDs&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s try to set one of the pins manually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /sys/class/gpio
# echo 57 &amp;gt; export
# echo out&amp;gt;gpio57/direction
# echo 0 &amp;gt; gpio57/value 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon setting &lt;code&gt;output&lt;/code&gt;, the LED lights up. Success!&lt;/p&gt;

&lt;p&gt;The output chip is open drain-ish (quasi bidirectional) and could
probably have
been connected with the LEDs oriented to light with the pin set to
&lt;code&gt;1&lt;/code&gt;. The chip then controls the current through an internal current
source. I did it the other way around, with the cathode connected to
the output pin. So now, we are able to control each output pin
individually from userspacs, just by writing to the filesystem. Much,
much more than I had ever dreamed. Even shell scripts can work with
the outputs and inputs. Wicked.&lt;/p&gt;

&lt;p&gt;The next step: blinking. I was lazy and googled for a bash script that
blinks. And found it &lt;a href="http://netduinoplusfun.wordpress.com/2012/07/16/blink-a-light-with-raspberry-pi/"&gt;on this blog&lt;/a&gt;. Tweaked it a little
bit, which was easy because it&amp;rsquo;s so well written. I added an argument
for the GPIO pin to use, to try all 8 pins. This is what I ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

# blink_arg.bash -- must run as root!
#       
# Blink GPIO pin on and off

LEDPIN=${1-57}
OFF=1
ON=0
# Make sure we have root access
if [ $EUID -ne 0 ]; then
		echo "You must be root to run this. Try 'sudo $0'"
		exit
fi

# Clean up procedure--turn off the LED, unexport the GPIO, and exit
cleanup()
{
		PIN=$1
		echo $OFF &amp;gt; /sys/class/gpio/gpio$PIN/value      # turn off
		echo $PIN &amp;gt; /sys/class/gpio/unexport
		echo Interrupted.
		exit
}

# Set up--select the pin and direction. Catch Control-C SIGHUP SIGKILL
echo $LEDPIN &amp;gt; /sys/class/gpio/export
echo out &amp;gt; /sys/class/gpio/gpio$LEDPIN/direction
trap 'cleanup $LEDPIN' 1 2 15

while true
do
		echo $ON &amp;gt; /sys/class/gpio/gpio$LEDPIN/value    # turn on
		sleep 1
		echo $OFF &amp;gt; /sys/class/gpio/gpio$LEDPIN/value   # turn off
		sleep 1
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works as expected. So now for some fun (we did not get all this
linux power for nothing!). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # ./blink_arg.bash 56&amp;amp;
 # ./blink_arg.bash 57&amp;amp;
 # ./blink_arg.bash 58&amp;amp;
 # # ... etcetera ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So using all the cool multitasking goodness to do nothing special at
all. How does that look?&lt;/p&gt;

&lt;iframe width="640" height="480" src="http://www.youtube.com/embed/eJ91tw86p7I" frameborder="0"&gt;&lt;/iframe&gt;

&lt;h1 id="input"&gt;Input&lt;/h1&gt;

&lt;p&gt;The next step is to use the input function. That will be the next update.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-07-19:/pragtich/blog/technology/Compiling gstreamer for C920 webcam.html</id>
    <title type="html">Compiling a modified GStreamer for the C920 webcam</title>
    <published>2012-07-18T22:00:00Z</published>
    <updated>2012-07-18T22:00:00Z</updated>
    <link href="http://members.home.nl/pragtich/blog/technology/Compiling gstreamer for C920 webcam.html" rel="alternate"/>
    <content type="html">&lt;h1 id="status"&gt;Status&lt;/h1&gt;

&lt;p&gt;** Take care: this page is full of mess. It does not work **&lt;/p&gt;

&lt;h1 id="satisfying-build-requirements"&gt;Satisfying build requirements&lt;/h1&gt;

&lt;h2 id="packages"&gt;Packages&lt;/h2&gt;

&lt;p&gt;Basically, a matter of &lt;code&gt;make prereq&lt;/code&gt; and &lt;code&gt;sudo fink install xxx&lt;/code&gt; until
all dependencies were met.&lt;/p&gt;

&lt;h2 id="filesystem"&gt;Filesystem&lt;/h2&gt;

&lt;p&gt;The OpenWRT buildroot needs a case-sensitive filesystem and tells you
that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Build dependency: OpenWrt can only be built on a case-sensitive
filesystem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default OS X system is not case sensitive. There is a simple
solution: create a separate disk image. As I found
&lt;a href="https://forum.openwrt.org/viewtopic.php?id=20914"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hdiutil create -size 2048m -fs HFSX -volname openwrt openwrt
# Later I had to do a resize: I needed ~ 8GB
Doubleclick the dmg
cd /Volumes/openwrt/
tar cf - ~/openwrt | tar xfp -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, I found the following tips that may be necessary (?) in the same
forum topic:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A couple notes on using MacOS X as a build environment that I've found so far:

Package names for "port" that you may need:
* gmake
* gawk
* gtar
* coreutils
* findutils
* getopt
* wget

(There may be others, I can't easily do a "clean install" on Mac)

$ export PATH="/opt/local/bin:$PATH"   # so that the GNU versions get picked up



You may need to

$ chmod +x scripts/md5sum    # appears to be "fixed" in current trunk


As suggested by marca, update XTools and re-symlink (gcov not required, AFAIK, but consistency is good)

/usr/bin/g++ -&amp;gt; g++-4.2
/usr/bin/gcc -&amp;gt; gcc-4.2
/usr/bin/gcov -&amp;gt; gcov-4.2


If you want to build the documentation, MacTeX will do it -- http://www.tug.org/mactex/
(though there is no BSD-make wrapper in that directory, so gmake in the docs directory)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="compiling"&gt;Compiling&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;make menuconfig

# selected ar7xx, minimal profile, toolchain and sdk

make V=99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first tries, I errored out due to the disk image being too
small. I the end I resized it to 8GB and it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hdiutil resize -size 8G openwrt.dmg
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="getting-the-feeds"&gt;Getting the feeds&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;scripts/feeds update -a
scripts/feeds install gstreamer
scripts/feeds install gst-plugins-good
scripts/feeds install gst-plugins-bad
scripts/feeds install gst-pluging-ugly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No problem!&lt;/p&gt;

&lt;h1 id="compiling-the-feeds"&gt;Compiling the feeds&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;make menuconfig
sudo ln -s /usr/bin/true /bin/true    # Somewhere there's a direct
path to true

# select the packages that I want
make V=99 package/gstreamer/compile
# et cetera for the plugins
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <id>tag:members.home.nl,2012-07-13:/pragtich/blog/kippycam/Openwrt connection checking.html</id>
    <title type="html">Keeping Openwrt online using DHCP</title>
    <published>2012-07-12T22:00:00Z</published>
    <updated>2012-07-12T22:00:00Z</updated>
    <link href="http://members.home.nl/pragtich/blog/kippycam/Openwrt connection checking.html" rel="alternate"/>
    <content type="html">&lt;p&gt;I noticed, when
&lt;a href="network-layout.html"&gt;installing the WiFi network bridge to the garden shed&lt;/a&gt;,
that the DHCP client does not reconnect when the connection has been
lost. It just sits there (don&amp;rsquo;t know when it would reconnect, maybe
when the lease expires?) unconnected. For my purpose, that&amp;rsquo;s not very
satisfying, as I need the connection to be robust. &lt;/p&gt;

&lt;p&gt;Since I had worked with &lt;code&gt;monit&lt;/code&gt; before, I figured this would be a
great way to periodically check the state of the connection and
re-enable it when it has dropped out. At a later date, &lt;code&gt;monit&lt;/code&gt; could
also turn out to be helpful in making sure that all other services on
the router remain healthy. &lt;/p&gt;

&lt;h1 id="installing--configuring"&gt;Installing &amp;amp; configuring&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;opkg update

# I am getting the packages from my local copy of the trunk, just
to have it all be consistent. That probably is only critical for
the kernel modules packages, but let's do it for sake of
simplicity

opkg install monit

vi /etc/monitrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added some sensible settings from the template that is in
&lt;code&gt;/etc/monitrc&lt;/code&gt;, mainly to start as a daemon, put the work files in
&lt;code&gt;/tmp&lt;/code&gt; and set the frequency of the checks. And the check for a
connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;check host kiprouter with address 10.0.0.4                                     
    if failed icmp type echo count 3 with timeout 3 seconds then
	exec "/etc/init.d/network restart"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to enable and start monit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/monit enable
/etc/init.d/monit start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing results later&amp;hellip;&lt;/p&gt;
</content>
  </entry>
</feed>
